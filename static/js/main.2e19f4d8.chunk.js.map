{"version":3,"sources":["components/Colors.tsx","beta/Colors.tsx","components/Context.tsx","components/Arena/Input.tsx","components/Arena/arena.tsx","components/App.tsx","beta/Context.tsx","beta/Arena/Input.tsx","beta/Arena/arena.tsx","beta/App.tsx","AppRouter.tsx","serviceWorker.ts","index.tsx"],"names":["Color","HighlightColors","BAD","bg","RED","text","WHITE","GREAT","GREEN","NONE","BLACK","DONE","LIGHT_GREY","AppContext","React","createContext","words","setWords","displayedWords","setDisplayedWords","updateWord","currentWord","nextWord","entered","setEntered","wpm","startTimer","useStyles","makeStyles","root","display","flexGrow","input","textDecoration","fontSize","UserInput","ref","useRef","classes","clearInput","current","getElementsByTagName","value","Consumer","TextField","fullWidth","onChange","e","currentIndex","target","updateColor","isOk","word","startsWith","isDone","highlight","handleWordUpdate","InputProps","WordBox","children","style","padding","backgroundColor","color","Display","flexWrap","map","key","WPM","useContext","Paper","elevation","Typography","variant","DisplayBar","Grid","item","container","paddingBottom","xs","justifyContent","Arena","direction","margin","sm","theme","createStyles","colors","brown","Wrapper","className","App","useState","setCurrentWord","setWpm","timer","setTimer","charCount","setCharCount","getWords","fetch","then","res","array","i","length","j","Math","floor","random","durstenfeldShuffle","split","getCharCount","useEffect","pollCharCount","setInterval","clearInterval","charsCompleted","elapsedSeconds","Date","now","round","getWPM","pollWPM","slice","Provider","index","updatedDisplay","Warning","palette","grey","textAlign","common","white","BetaApp","AppRouter","basename","process","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2e19f4d8.chunk.js","sourcesContent":["export enum Color {\n  RED = \"#c41414\",\n  GREEN = \"green\",\n  NONE = \"inherit\",\n  WHITE = \"white\",\n  BLACK = \"black\",\n  LIGHT_GREY = \"lightgrey\",\n}\n\nexport interface ThemeColor {\n  bg: Color;\n  text: Color;\n}\n\nexport type ThemeColors = ThemeColor[];\n\n// the interface\nexport interface HighlightColor {\n  BAD: ThemeColor;\n  GREAT: ThemeColor;\n  NONE: ThemeColor;\n  DONE: ThemeColor;\n}\n\n// the star: object\nexport const HighlightColors: HighlightColor = {\n  BAD: {\n    bg: Color.RED,\n    text: Color.WHITE,\n  },\n  GREAT: {\n    bg: Color.GREEN,\n    text: Color.WHITE,\n  },\n  NONE: {\n    bg: Color.NONE,\n    text: Color.BLACK,\n  },\n  DONE: {\n    bg: Color.LIGHT_GREY,\n    text: Color.BLACK,\n  },\n};\n","export enum Color {\n  RED = \"#c41414\",\n  GREEN = \"green\",\n  NONE = \"inherit\",\n  WHITE = \"white\",\n  BLACK = \"black\",\n  LIGHT_GREY = \"lightgrey\",\n}\n\nexport interface ThemeColor {\n  bg: Color;\n  text: Color;\n}\n\nexport type ThemeColors = ThemeColor[];\n\n// the interface\nexport interface HighlightColor {\n  BAD: ThemeColor;\n  GREAT: ThemeColor;\n  NONE: ThemeColor;\n  DONE: ThemeColor;\n}\n\n// the star: object\nexport const HighlightColors: HighlightColor = {\n  BAD: {\n    bg: Color.RED,\n    text: Color.WHITE,\n  },\n  GREAT: {\n    bg: Color.GREEN,\n    text: Color.WHITE,\n  },\n  NONE: {\n    bg: Color.NONE,\n    text: Color.BLACK,\n  },\n  DONE: {\n    bg: Color.LIGHT_GREY,\n    text: Color.BLACK,\n  },\n};\n","import React from \"react\";\nimport { ThemeColor } from \"./Colors\";\n\nexport interface Word {\n  word: string;\n  highlight: ThemeColor;\n}\n\ninterface WordsContext {\n  words: Word[];\n  displayedWords: Word[];\n  setDisplayedWords: Function;\n  setWords: Function;\n  updateWord: Function;\n  currentWord: number;\n  nextWord: Function;\n  entered: string;\n  setEntered: Function;\n  wpm: number;\n  startTimer: Function;\n}\n\nconst AppContext = React.createContext<WordsContext>({\n  words: [],\n  setWords: () => {},\n  displayedWords: [],\n  setDisplayedWords: () => {},\n  updateWord: () => {},\n  currentWord: 0,\n  nextWord: () => {},\n  entered: \"\",\n  setEntered: () => {},\n  wpm: 0,\n  startTimer: () => {},\n});\n\nexport { AppContext };\n","import React, { ChangeEvent, useRef } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { HighlightColors } from \"../Colors\";\nimport { AppContext, Word } from \"../Context\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    flexGrow: 1,\n  },\n  input: {\n    textDecoration: \"none\",\n    fontSize: 50,\n  },\n});\n\ninterface handleWordUpdateProps {\n  updateWord: Function;\n  e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>;\n  currentIndex: number;\n  displayedWords: Word[];\n  nextWord: Function;\n  clearInput: Function;\n  setEntered: Function;\n  startTimer: Function;\n}\n\n// Checking and updating highlights if needed\nconst handleWordUpdate = ({\n  updateWord,\n  e,\n  currentIndex,\n  displayedWords,\n  nextWord,\n  clearInput,\n  setEntered,\n  startTimer,\n}: handleWordUpdateProps) => {\n  const entered = e.target.value;\n  setEntered(entered);\n\n  // start timer\n  if (currentIndex === 0 && entered) {\n    startTimer();\n  }\n\n  const currentWord = displayedWords[currentIndex];\n  const isOk = currentWord.word.startsWith(entered);\n  const isDone = entered === currentWord.word + \" \";\n\n  let updateColor;\n\n  if (isDone) {\n    updateColor = HighlightColors.DONE;\n  } else if (!entered) {\n    updateColor = HighlightColors.NONE;\n  } else {\n    updateColor = isOk ? HighlightColors.GREAT : HighlightColors.BAD;\n  }\n\n  const shouldUpdate = updateColor !== currentWord.highlight;\n\n  shouldUpdate && updateWord(currentIndex, updateColor);\n  if (isDone) {\n    clearInput();\n    nextWord();\n  }\n};\n\nconst UserInput = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const classes = useStyles();\n\n  const clearInput = () => {\n    if (!ref.current) {\n      return;\n    }\n    ref.current.getElementsByTagName(\"input\")[0].value = \"\";\n  };\n\n  return (\n    <AppContext.Consumer>\n      {({\n        displayedWords,\n        currentWord,\n        updateWord,\n        nextWord,\n        setEntered,\n        startTimer,\n      }) => {\n        return (\n          <TextField\n            ref={ref}\n            fullWidth\n            onChange={(e) =>\n              handleWordUpdate({\n                updateWord,\n                e,\n                currentIndex: currentWord,\n                displayedWords,\n                nextWord,\n                clearInput,\n                setEntered,\n                startTimer,\n              })\n            }\n            InputProps={{\n              classes: {\n                root: classes.root,\n                input: classes.input,\n              },\n            }}\n          />\n        );\n      }}\n    </AppContext.Consumer>\n  );\n};\n\nexport { UserInput as default };\n","import React, { useContext } from \"react\";\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\nimport UserInput from \"./Input\";\nimport { ThemeColor } from \"../Colors\";\nimport { AppContext } from \"../Context\";\n\ninterface WordProps {\n  children: React.ReactNode;\n  highlight: ThemeColor;\n}\n\nconst WordBox = ({ children, highlight }: WordProps) => {\n  return (\n    <span\n      style={{\n        padding: \"10px\",\n        backgroundColor: highlight.bg,\n        color: highlight.text,\n      }}\n    >\n      {children}\n    </span>\n  );\n};\n\nconst Display = () => {\n  return (\n    <AppContext.Consumer>\n      {({ displayedWords }) => {\n        return (\n          <div style={{ display: \"flex\", flexWrap: \"wrap\", padding: \"10px\" }}>\n            {displayedWords.map((word) => (\n              <WordBox key={word.word} highlight={word.highlight}>\n                {word.word}\n              </WordBox>\n            ))}\n          </div>\n        );\n      }}\n    </AppContext.Consumer>\n  );\n};\n\nconst WPM = () => {\n  const { wpm } = useContext(AppContext);\n  return (\n    <Paper elevation={3}>\n      <Typography variant=\"h5\" style={{ padding: \"1rem\" }}>\n        WPM: {wpm}\n      </Typography>\n    </Paper>\n  );\n};\n\nconst DisplayBar = () => {\n  return (\n    <Grid item container style={{ padding: \"2rem\", paddingBottom: \"0.5rem\" }}>\n      <Grid item xs={9} />\n      <Grid item xs={3} style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <WPM />\n      </Grid>\n    </Grid>\n  );\n};\n\nconst Arena = () => {\n  return (\n    <Grid container direction=\"column\">\n      <DisplayBar />\n      <Grid item container>\n        <Grid item xs={1} />\n        <Grid item container xs={10}>\n          <Grid item xs={1} />\n          <Grid item xs={10}>\n            <Paper elevation={5} style={{ margin: \"1.5rem\" }}>\n              <Display />\n            </Paper>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            style={{ display: \"flex\", justifyContent: \"center\" }}\n          >\n            <Paper\n              elevation={3}\n              style={{\n                margin: \"1rem 2rem\",\n                display: \"flex\",\n                flexGrow: 1,\n              }}\n            >\n              <UserInput />\n            </Paper>\n          </Grid>\n        </Grid>\n        <Grid item sm={1} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Arena;\n","import React, { useState, useEffect } from \"react\";\n\nimport Arena from \"./Arena/arena\";\nimport { Word, AppContext } from \"./Context\";\nimport \"./App.css\";\nimport { HighlightColors, ThemeColor } from \"./Colors\";\nimport { makeStyles, Theme, createStyles, colors } from \"@material-ui/core\";\n\n// What a legend\nconst durstenfeldShuffle = (array: string[]) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nconst App = () => {\n  const [words, setWords] = useState<Word[]>([]);\n  const [displayedWords, setDisplayedWords] = useState<Word[]>([]);\n  const [currentWord, setCurrentWord] = useState<number>(0);\n  const [entered, setEntered] = useState<string>(\"\");\n  const [wpm, setWpm] = useState<number>(0);\n  const [timer, setTimer] = useState<number>(0);\n  const [charCount, setCharCount] = useState<number>(0);\n\n  // imagine not using a hardcoded list of words\n  // Jk, this is temporary\n  const getWords = (setWords: Function) => {\n    fetch(\"/words.txt\")\n      .then((res) => res.text())\n      .then((text) =>\n        setWords(\n          durstenfeldShuffle(text.split(\" \")).map((word) => ({\n            word,\n            highlight: HighlightColors.NONE,\n          }))\n        )\n      );\n  };\n\n  // update the word at position\n  const updateWord = (index: number, updateColor: ThemeColor) => {\n    const updatedDisplay = [...displayedWords];\n    updatedDisplay[index] = {\n      ...updatedDisplay[index],\n      highlight: updateColor,\n    };\n    setDisplayedWords(updatedDisplay);\n  };\n\n  const getWPM = () => {\n    // if timer is not started, ignore\n    if (!timer) {\n      return 0;\n    }\n\n    // Calculate wpm based on ((words completed)/(time elapsed))\n    const charsCompleted = charCount;\n    const elapsedSeconds = (Date.now() - timer) / 1000;\n\n    // a word is 5 characters\n    return Math.round((charsCompleted / (5 * elapsedSeconds)) * 60);\n  };\n\n  const getCharCount = () => {\n    if (currentWord <= 0) {\n      return 0;\n    }\n    return charCount + words[currentWord - 1].word.length;\n  };\n\n  const startTimer = () => {\n    // no need for an active timer\n    if (timer) {\n      return;\n    } else {\n      // timer is set to the current time\n      setTimer(Date.now());\n    }\n  };\n\n  const nextWord = () => {\n    setCurrentWord(currentWord + 1);\n  };\n\n  useEffect(() => {\n    setCharCount(getCharCount());\n    const pollCharCount = setInterval(() => {\n      setCharCount(getCharCount());\n    }, 2000);\n\n    return () => {\n      clearInterval(pollCharCount);\n    };\n  }, [currentWord]);\n\n  useEffect(() => {\n    setWpm(getWPM());\n    const pollWPM = setInterval(() => {\n      setCharCount(getCharCount());\n    }, 2000);\n\n    return () => {\n      clearInterval(pollWPM);\n    };\n  }, [charCount]);\n\n  useEffect(() => {\n    getWords(setWords);\n  }, []);\n\n  useEffect(() => {\n    setDisplayedWords(words.slice(0, 100));\n  }, [words]);\n\n  return (\n    <AppContext.Provider\n      value={{\n        words,\n        setWords,\n        displayedWords,\n        setDisplayedWords,\n        updateWord,\n        currentWord,\n        nextWord,\n        entered,\n        setEntered,\n        wpm,\n        startTimer,\n      }}\n    >\n      <Wrapper>\n        <Arena />\n      </Wrapper>\n    </AppContext.Provider>\n  );\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexGrow: 1,\n      backgroundColor: colors.brown[200],\n    },\n  })\n);\n\nconst Wrapper: React.FC = ({ children }) => {\n  const classes = useStyles();\n  return <div className={classes.root}>{children}</div>;\n};\n\nexport default App;\n","import React from \"react\";\nimport { ThemeColor } from \"./Colors\";\n\nexport interface Word {\n  word: string;\n  highlight: ThemeColor;\n}\n\ninterface WordsContext {\n  words: Word[];\n  displayedWords: Word[];\n  setDisplayedWords: Function;\n  setWords: Function;\n  updateWord: Function;\n  currentWord: number;\n  nextWord: Function;\n  entered: string;\n  setEntered: Function;\n  wpm: number;\n  startTimer: Function;\n}\n\nconst AppContext = React.createContext<WordsContext>({\n  words: [],\n  setWords: () => {},\n  displayedWords: [],\n  setDisplayedWords: () => {},\n  updateWord: () => {},\n  currentWord: 0,\n  nextWord: () => {},\n  entered: \"\",\n  setEntered: () => {},\n  wpm: 0,\n  startTimer: () => {},\n});\n\nexport { AppContext };\n","import React, { ChangeEvent, useRef } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { HighlightColors } from \"../Colors\";\nimport { AppContext, Word } from \"../Context\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    flexGrow: 1,\n    // padding: \"1 0rem\",\n  },\n  input: {\n    // padding: \"0 1rem\",\n    textDecoration: \"none\",\n    fontSize: 50,\n  },\n});\n\ninterface handleWordUpdateProps {\n  updateWord: Function;\n  e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>;\n  currentIndex: number;\n  displayedWords: Word[];\n  nextWord: Function;\n  clearInput: Function;\n  setEntered: Function;\n  startTimer: Function;\n}\n\n// Checking and updating highlights if needed\nconst handleWordUpdate = ({\n  updateWord,\n  e,\n  currentIndex,\n  displayedWords,\n  nextWord,\n  clearInput,\n  setEntered,\n  startTimer,\n}: handleWordUpdateProps) => {\n  const entered = e.target.value;\n  setEntered(entered);\n\n  // start timer\n  if (currentIndex === 0 && entered) {\n    startTimer();\n  }\n\n  const currentWord = displayedWords[currentIndex];\n  const isOk = currentWord.word.startsWith(entered);\n  const isDone = entered === currentWord.word + \" \";\n\n  let updateColor;\n\n  if (isDone) {\n    updateColor = HighlightColors.DONE;\n  } else if (!entered) {\n    updateColor = HighlightColors.NONE;\n  } else {\n    updateColor = isOk ? HighlightColors.GREAT : HighlightColors.BAD;\n  }\n\n  const shouldUpdate = updateColor !== currentWord.highlight;\n\n  shouldUpdate && updateWord(currentIndex, updateColor);\n  if (isDone) {\n    clearInput();\n    nextWord();\n  }\n};\n\nconst UserInput = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const classes = useStyles();\n\n  const clearInput = () => {\n    if (!ref.current) {\n      return;\n    }\n    ref.current.getElementsByTagName(\"input\")[0].value = \"\";\n  };\n\n  return (\n    <AppContext.Consumer>\n      {({\n        displayedWords,\n        currentWord,\n        updateWord,\n        nextWord,\n        setEntered,\n        startTimer,\n      }) => {\n        return (\n          <TextField\n            ref={ref}\n            fullWidth\n            onChange={(e) =>\n              handleWordUpdate({\n                updateWord,\n                e,\n                currentIndex: currentWord,\n                displayedWords,\n                nextWord,\n                clearInput,\n                setEntered,\n                startTimer,\n              })\n            }\n            InputProps={{\n              classes: {\n                root: classes.root,\n                input: classes.input,\n              },\n            }}\n          />\n        );\n      }}\n    </AppContext.Consumer>\n  );\n};\n\nexport { UserInput as default };\n","import React, { useContext } from \"react\";\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\nimport UserInput from \"./Input\";\nimport { ThemeColor } from \"../Colors\";\nimport { AppContext } from \"../Context\";\n\ninterface WordProps {\n  children: React.ReactNode;\n  highlight: ThemeColor;\n}\n\nconst WordBox = ({ children, highlight }: WordProps) => {\n  return (\n    <span\n      style={{\n        padding: \"10px\",\n        backgroundColor: highlight.bg,\n        color: highlight.text,\n      }}\n    >\n      {children}\n    </span>\n  );\n};\n\nconst Display = () => {\n  return (\n    <AppContext.Consumer>\n      {({ displayedWords }) => {\n        return (\n          <div style={{ display: \"flex\", flexWrap: \"wrap\", padding: \"10px\" }}>\n            {displayedWords.map((word) => (\n              <WordBox key={word.word} highlight={word.highlight}>\n                {word.word}\n              </WordBox>\n            ))}\n          </div>\n        );\n      }}\n    </AppContext.Consumer>\n  );\n};\n\nconst WPM = () => {\n  const { wpm } = useContext(AppContext);\n  return (\n    <Paper elevation={3}>\n      <Typography variant=\"h5\" style={{ padding: \"1rem\" }}>\n        WPM: {wpm}\n      </Typography>\n    </Paper>\n  );\n};\n\nconst DisplayBar = () => {\n  return (\n    <Grid item container style={{ padding: \"2rem\", paddingBottom: \"0.5rem\" }}>\n      <Grid item xs={9} />\n      <Grid item xs={3} style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <WPM />\n      </Grid>\n    </Grid>\n  );\n};\n\nconst Arena = () => {\n  return (\n    <Grid container direction=\"column\">\n      <DisplayBar />\n      <Grid item container>\n        <Grid item xs={1} />\n        <Grid item container xs={10}>\n          <Grid item xs={1} />\n          <Grid item xs={10}>\n            <Paper elevation={5} style={{ margin: \"1.5rem\" }}>\n              <Display />\n            </Paper>\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            style={{ display: \"flex\", justifyContent: \"center\" }}\n          >\n            <Paper\n              elevation={3}\n              style={{\n                margin: \"1rem 2rem\",\n                display: \"flex\",\n                flexGrow: 1,\n              }}\n            >\n              <UserInput />\n            </Paper>\n          </Grid>\n        </Grid>\n        <Grid item sm={1} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Arena;\n","import React, { useState, useEffect } from \"react\";\n\nimport Arena from \"./Arena/arena\";\nimport { Word, AppContext } from \"./Context\";\nimport \"./App.css\";\nimport { HighlightColors, ThemeColor } from \"./Colors\";\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  colors,\n  Typography,\n} from \"@material-ui/core\";\n\n// What a legend\nconst durstenfeldShuffle = (array: string[]) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nconst BetaApp = () => {\n  const [words, setWords] = useState<Word[]>([]);\n  const [displayedWords, setDisplayedWords] = useState<Word[]>([]);\n  const [currentWord, setCurrentWord] = useState<number>(0);\n  const [entered, setEntered] = useState<string>(\"\");\n  const [wpm, setWpm] = useState<number>(0);\n  const [timer, setTimer] = useState<number>(0);\n  const [charCount, setCharCount] = useState<number>(0);\n\n  // imagine not using a hardcoded list of words\n  // Jk, this is temporary\n  const getWords = (setWords: Function) => {\n    fetch(\"/words.txt\")\n      .then((res) => res.text())\n      .then((text) =>\n        setWords(\n          durstenfeldShuffle(text.split(\" \")).map((word) => ({\n            word,\n            highlight: HighlightColors.NONE,\n          }))\n        )\n      );\n  };\n\n  // update the word at position\n  const updateWord = (index: number, updateColor: ThemeColor) => {\n    const updatedDisplay = [...displayedWords];\n    updatedDisplay[index] = {\n      ...updatedDisplay[index],\n      highlight: updateColor,\n    };\n    setDisplayedWords(updatedDisplay);\n  };\n\n  const getWPM = () => {\n    // if timer is not started, ignore\n    if (!timer) {\n      return 0;\n    }\n\n    // Calculate wpm based on ((words completed)/(time elapsed))\n    const charsCompleted = charCount;\n    const elapsedSeconds = (Date.now() - timer) / 1000;\n\n    // a word is 5 characters\n    return Math.round((charsCompleted / (5 * elapsedSeconds)) * 60);\n  };\n\n  const getCharCount = () => {\n    if (currentWord <= 0) {\n      return 0;\n    }\n    return charCount + words[currentWord - 1].word.length;\n  };\n\n  const startTimer = () => {\n    // no need for an active timer\n    if (timer) {\n      return;\n    } else {\n      // timer is set to the current time\n      setTimer(Date.now());\n    }\n  };\n\n  const nextWord = () => {\n    setCurrentWord(currentWord + 1);\n  };\n\n  useEffect(() => {\n    setCharCount(getCharCount());\n    const pollCharCount = setInterval(() => {\n      setCharCount(getCharCount());\n    }, 2000);\n\n    return () => {\n      clearInterval(pollCharCount);\n    };\n  }, [currentWord]);\n\n  useEffect(() => {\n    setWpm(getWPM());\n    const pollWPM = setInterval(() => {\n      setCharCount(getCharCount());\n    }, 2000);\n\n    return () => {\n      clearInterval(pollWPM);\n    };\n  }, [charCount]);\n\n  useEffect(() => {\n    getWords(setWords);\n  }, []);\n\n  useEffect(() => {\n    setDisplayedWords(words.slice(0, 100));\n  }, [words]);\n\n  return (\n    <>\n      <Warning />\n      <AppContext.Provider\n        value={{\n          words,\n          setWords,\n          displayedWords,\n          setDisplayedWords,\n          updateWord,\n          currentWord,\n          nextWord,\n          entered,\n          setEntered,\n          wpm,\n          startTimer,\n        }}\n      >\n        <Wrapper>\n          <Arena />\n        </Wrapper>\n      </AppContext.Provider>\n    </>\n  );\n};\n\nconst Warning = () => {\n  const classes = useStyles();\n  return (\n    <Typography variant=\"h6\" className={classes.text}>\n      This is the beta site, here for fun. The features here may or may not be\n      ported over to the main one :)\n    </Typography>\n  );\n};\n\nconst useStyles = makeStyles((theme: Theme) => {\n  return createStyles({\n    root: {\n      display: \"flex\",\n      flexGrow: 1,\n      backgroundColor: theme.palette.grey[800],\n    },\n    text: {\n      textAlign: \"center\",\n      backgroundColor: theme.palette.grey[800],\n      color: theme.palette.common.white,\n    },\n  });\n});\n\nconst Wrapper: React.FC = ({ children }) => {\n  const classes = useStyles();\n  return <div className={classes.root}>{children}</div>;\n};\n\nexport default BetaApp;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport App from \"./components/App\";\nimport BetaApp from \"./beta/App\";\n\nconst AppRouter = () => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/beta\" exact component={BetaApp} />\n        <Route component={App} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport AppRouter from \"./AppRouter\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppRouter />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}