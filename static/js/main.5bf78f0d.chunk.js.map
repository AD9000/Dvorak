{"version":3,"sources":["components/Colors.tsx","components/Context.tsx","components/Arena/Input.tsx","components/Constants.ts","components/Arena/arena.tsx","components/analytics.ts","components/Congrats.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Color","HighlightColors","BAD","bg","RED","text","WHITE","GREAT","TEST","NONE","LIGHT_GREY","BLACK","DONE","GREEN","AppContext","React","createContext","words","setWords","displayedWords","setDisplayedWords","updateWord","currentWord","nextWord","entered","setEntered","lastEntered","setLastEntered","wpm","setWpm","stopTimer","time","setTime","charCount","setCharCount","timer","lastWord","setLastWord","currentSum","setCurrentSum","ArenaContext","typing","setTyping","TimerContext","startTimer","useStyles","makeStyles","root","display","flexGrow","input","textDecoration","fontSize","textAlign","UserInput","ref","useRef","classes","useContext","handleWordUpdate","e","target","value","updateColor","currentIndex","isOk","word","startsWith","isDone","highlight","current","getElementsByTagName","TextField","inputRef","focus","autoFocus","fullWidth","onChange","InputProps","WordBox","index","style","padding","fontWeight","color","slice","length","Display","flexWrap","map","i","WPMDisplay","Paper","elevation","Typography","variant","WPM","useEffect","console","log","timeMins","Math","ceil","DisplayBar","Grid","item","container","paddingBottom","xs","justifyContent","Arena","useState","Provider","direction","margin","minHeight","sm","track","ReactGA","initialize","pageview","window","location","pathname","Congrats","confetti","setConfetti","width","innerWidth","toString","height","innerHeight","setTimeout","active","config","flexDirection","alignItems","theme","createStyles","flex","backgroundColor","colors","brown","Wrapper","children","className","App","setCurrentWord","started","setStarted","done","setDone","getWords","fetch","then","res","array","j","floor","random","durstenfeldShuffle","split","updateTime","clearTimeout","updatedDisplay","WORD_COUNT","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5bf78f0d.chunk.js","sourcesContent":["export enum Color {\n  RED = \"#c41414\",\n  GREEN = \"green\",\n  NONE = \"inherit\",\n  WHITE = \"white\",\n  BLACK = \"black\",\n  LIGHT_GREY = \"#c2c2c2\",\n  DARK_GREY = \"darkgray\",\n  TEST = \"#626262\",\n}\n\nexport interface ThemeColor {\n  bg: Color;\n  text: Color;\n}\n\nexport type ThemeColors = ThemeColor[];\n\n// the interface\nexport interface HighlightColor {\n  BAD: ThemeColor;\n  GREAT: ThemeColor;\n  NONE: ThemeColor;\n  DONE: ThemeColor;\n}\n\n// the star: object\nexport const HighlightColors: HighlightColor = {\n  BAD: {\n    bg: Color.RED,\n    text: Color.WHITE,\n  },\n  GREAT: {\n    bg: Color.TEST,\n    text: Color.WHITE,\n  },\n  NONE: {\n    bg: Color.LIGHT_GREY,\n    text: Color.BLACK,\n  },\n  DONE: {\n    bg: Color.GREEN,\n    text: Color.BLACK,\n  },\n};\n","import React, { createContext } from \"react\";\nimport { ThemeColor } from \"./Colors\";\n\nexport interface Word {\n  word: string;\n  highlight: ThemeColor;\n}\n\ninterface WordsContext {\n  words: Word[];\n  displayedWords: Word[];\n  setDisplayedWords: Function;\n  setWords: Function;\n  updateWord: Function;\n  currentWord: number;\n  nextWord: Function;\n  entered: string;\n  setEntered: Function;\n  lastEntered: string;\n  setLastEntered: Function;\n  wpm: number;\n  setWpm: Function;\n  stopTimer: Function;\n  time: number;\n  setTime: Function;\n  charCount: number;\n  setCharCount: Function;\n  timer: number;\n  lastWord: number;\n  setLastWord: Function;\n  currentSum: number;\n  setCurrentSum: Function;\n}\n\nconst AppContext = React.createContext<WordsContext>({\n  words: [],\n  setWords: () => {},\n  displayedWords: [],\n  setDisplayedWords: () => {},\n  updateWord: () => {},\n  currentWord: 0,\n  nextWord: () => {},\n  entered: \"\",\n  setEntered: () => {},\n  lastEntered: \"\",\n  setLastEntered: () => {},\n  wpm: 0,\n  setWpm: () => {},\n  stopTimer: () => {},\n  time: -1,\n  setTime: () => {},\n  charCount: 0,\n  setCharCount: () => {},\n  timer: 0,\n  lastWord: -1,\n  setLastWord: () => {},\n  currentSum: 0,\n  setCurrentSum: () => {},\n});\n\ninterface TypingContext {\n  typing: boolean;\n  setTyping: Function;\n}\n\nconst ArenaContext = createContext<TypingContext>({\n  typing: false,\n  setTyping: () => {},\n});\n\ninterface TimeContext {\n  startTimer: Function;\n  stopTimer: Function;\n}\n\nconst TimerContext = createContext<TimeContext>({\n  startTimer: () => {},\n  stopTimer: () => {},\n});\n\nexport { AppContext, ArenaContext, TimerContext };\n","import React, { ChangeEvent, useContext, useRef } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { HighlightColors } from \"../Colors\";\nimport { AppContext, ArenaContext, TimerContext, Word } from \"../Context\";\nimport { WORD_COUNT } from \"../Constants\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    flexGrow: 1,\n  },\n  input: {\n    textDecoration: \"none\",\n    fontSize: 50,\n    textAlign: \"center\",\n  },\n});\n\nconst longestCommonSubstring = (first: string, second: string) => {\n  const len = first.length > second.length ? second.length : first.length;\n  let word = \"\";\n  for (let i = 0; i < len; i++) {\n    const ch = first.charAt(i);\n    if (ch === second.charAt(i)) {\n      word += ch;\n    }\n  }\n\n  return word;\n};\n\nconst UserInput = () => {\n  const ref = useRef<HTMLInputElement>(null);\n  const classes = useStyles();\n\n  const {\n    displayedWords,\n    currentWord,\n    updateWord,\n    nextWord,\n    setEntered,\n    stopTimer,\n    setTime,\n    charCount,\n    setCharCount,\n  } = useContext(AppContext);\n\n  const { startTimer } = useContext(TimerContext);\n\n  const { typing, setTyping } = useContext(ArenaContext);\n\n  const clearInput = () => {\n    if (!ref.current) {\n      return;\n    }\n    ref.current.getElementsByTagName(\"input\")[0].value = \"\";\n  };\n\n  // Checking and updating highlights if needed\n  const handleWordUpdate = (\n    e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    const entered = e.target.value;\n    setEntered(entered);\n\n    //   console.log(\"updating word...\", started);\n\n    // start timer\n    // if (started && currentWord === 0 && entered) {\n    //   console.log(\"starting timer...\");\n    //   startTimer();\n    // }\n\n    if (currentWord === 0 && entered && !typing) {\n      startTimer();\n      setTyping(true);\n    }\n\n    if (currentWord >= WORD_COUNT) {\n      return;\n    }\n\n    const currentIndex = displayedWords[currentWord];\n    const isOk = currentIndex.word.startsWith(entered);\n    const isDone = entered === currentIndex.word + \" \";\n\n    let updateColor;\n\n    if (isDone) {\n      updateColor = HighlightColors.DONE;\n    } else if (!entered) {\n      updateColor = HighlightColors.NONE;\n    } else {\n      updateColor = isOk ? HighlightColors.GREAT : HighlightColors.BAD;\n    }\n\n    const shouldUpdate = updateColor !== currentIndex.highlight;\n\n    shouldUpdate && updateWord(currentWord, updateColor);\n    if (isDone) {\n      clearInput();\n      nextWord();\n    }\n\n    if (isOk) {\n      setCharCount(charCount + 1);\n    }\n  };\n\n  return (\n    <TextField\n      ref={ref}\n      inputRef={(input) => input && input.focus()}\n      autoFocus\n      fullWidth\n      onChange={(e) => handleWordUpdate(e)}\n      InputProps={{\n        classes: {\n          root: classes.root,\n          input: classes.input,\n        },\n      }}\n    />\n  );\n};\n\nexport { UserInput as default };\n","export const WORD_COUNT = 100;\nexport const WORD_SIZE = 5;\nexport const TRACKING_ID = \"UA-186342924-1\";\n\nconst strings = {\n  starter: {\n    start: \"START\",\n  },\n};\n\nexport { strings };\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Paper, Typography, Button } from \"@material-ui/core\";\nimport UserInput from \"./Input\";\nimport { HighlightColors, ThemeColor } from \"../Colors\";\nimport { AppContext, ArenaContext } from \"../Context\";\nimport { WORD_SIZE } from \"../Constants\";\nimport { throttle } from \"lodash\";\n\ninterface WordProps {\n  highlight: ThemeColor;\n  index: number;\n  word: string;\n  currentWord: boolean;\n}\n\nconst WordBox = ({ highlight, index, word, currentWord }: WordProps) => {\n  return (\n    <span\n      style={{\n        padding: \"10px\",\n        fontSize: 25,\n        fontWeight: 500,\n        textDecoration: currentWord ? \"underline\" : \"none\",\n      }}\n    >\n      <span\n        style={{\n          // backgroundColor: highlight.bg,\n          color: highlight.bg,\n        }}\n      >\n        {word.slice(0, index)}\n      </span>\n      <span\n        style={{\n          color: HighlightColors.NONE.bg,\n        }}\n      >\n        {word.slice(index, word.length)}\n      </span>\n    </span>\n  );\n};\n\ninterface compareProps {\n  entered: string;\n  word: string;\n}\n\nconst compare = ({ entered, word }: compareProps) => {\n  for (let i = 0; i < word.length; i++) {\n    if (i >= entered.length || entered[i] !== word[i]) {\n      return i;\n    }\n  }\n  return word.length;\n};\n\nconst Display = () => {\n  const { displayedWords, entered, currentWord } = useContext(AppContext);\n  return (\n    <div style={{ display: \"flex\", flexWrap: \"wrap\", padding: \"10px\" }}>\n      {displayedWords.map((word, i) => (\n        <WordBox\n          key={word.word}\n          highlight={word.highlight}\n          index={i === currentWord ? entered.length : word.word.length}\n          word={word.word}\n          currentWord={i === currentWord}\n        />\n      ))}\n    </div>\n  );\n};\n\n// const WPM = () => {\n//   const {\n//     entered,\n//     lastEntered,\n//     setLastEntered,\n//     charCount,\n//     setCharCount,\n//     currentWord,\n//     lastWord,\n//     setLastWord,\n//     words,\n//     wpm,\n//     setWpm,\n//     time,\n//     setTime,\n//     timer,\n//     currentSum,\n//   } = useContext(AppContext);\n\n//   const getCharCount = () => {\n//     if (lastWord === currentWord) {\n//       if (entered === lastEntered) {\n//         return charCount;\n//       } else {\n//         return currentSum + entered.length;\n//       }\n//     }\n//     setLastEntered(entered);\n//     setLastWord(currentWord);\n//     if (currentWord === 0) {\n//       return entered.length;\n//     }\n//     return currentSum + words[currentWord - 1].word.length;\n//   };\n\n//   const getWPM = () => {\n//     // if timer is not started, ignore\n//     if (!timer) {\n//       return 0;\n//     }\n\n//     // Calculate wpm based on ((words completed)/(time elapsed))\n//     const charsCompleted = charCount;\n//     const elapsedSeconds = (Date.now() - timer) / 1000;\n\n//     // a word is 5 characters\n//     return Math.round((charsCompleted / (WORD_SIZE * elapsedSeconds)) * 60);\n//   };\n\n//   const tick = () => {\n//     if (time > 100) {\n//       setTime(0);\n//     } else {\n//       setTime(time + 1);\n//     }\n//   };\n\n//   useEffect(() => {\n//     // console.log(\"ok\");\n//     throttle(() => {\n//       //   console.log(\"running\");\n//       setCharCount(getCharCount());\n//     }, 1000)();\n//     setTimeout(tick, 1200);\n//   }, [time]);\n\n//   return <WPMDisplay wpm={wpm} />;\n// };\n\nconst WPMDisplay = () => {\n  const { wpm } = useContext(AppContext);\n  return (\n    <Paper elevation={3}>\n      <Typography variant=\"h5\" style={{ padding: \"1rem\" }}>\n        WPM: {wpm}\n      </Typography>\n    </Paper>\n  );\n};\n\nconst WPM = () => {\n  // measure WPM every 1 second\n  const { time, currentWord, charCount, setWpm } = useContext(AppContext);\n\n  useEffect(() => {\n    if (time < 1) {\n      return;\n    }\n    console.log(\"oh would you look at the index:\", charCount);\n    const timeMins = time / 60;\n    const wpm = Math.ceil((charCount + 1) / (WORD_SIZE * timeMins));\n    setWpm(wpm);\n  }, [time]);\n\n  return <WPMDisplay />;\n};\n\nconst DisplayBar = () => {\n  return (\n    <Grid item container style={{ padding: \"2rem\", paddingBottom: \"0.5rem\" }}>\n      <Grid item xs={9} />\n      <Grid item xs={3} style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <WPM />\n      </Grid>\n    </Grid>\n  );\n};\n\nconst Arena = () => {\n  const [typing, setTyping] = useState(false);\n  const { entered, time } = useContext(AppContext);\n  useEffect(() => {\n    console.log(\"entered\", entered);\n    console.log(\"time\", time);\n  });\n\n  return (\n    <ArenaContext.Provider\n      value={{\n        typing,\n        setTyping,\n      }}\n    >\n      <Grid container direction=\"column\">\n        <DisplayBar />\n        <Grid item container>\n          <Grid item xs={1} />\n\n          <Grid item container xs={10}>\n            <Grid item container style={{ justifyContent: \"center\" }}>\n              <Grid item xs={10}>\n                <Paper\n                  elevation={5}\n                  style={{\n                    margin: \"1.5rem\",\n                    display: \"flex\",\n                    flexGrow: 1,\n                    minHeight: 400,\n                  }}\n                >\n                  <Display />\n                </Paper>\n              </Grid>\n            </Grid>\n            <Grid item container style={{ justifyContent: \"center\" }}>\n              <Grid\n                item\n                xs={10}\n                style={{ display: \"flex\", justifyContent: \"center\" }}\n              >\n                <Paper\n                  elevation={3}\n                  style={{\n                    margin: \"1rem 1.5rem\",\n                    display: \"flex\",\n                    flexGrow: 1,\n                  }}\n                >\n                  <UserInput />\n                </Paper>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item sm={1} />\n        </Grid>\n      </Grid>\n    </ArenaContext.Provider>\n  );\n};\n\nexport default Arena;\n","import { TRACKING_ID } from \"./Constants\";\nimport ReactGA from \"react-ga\";\n\nconst track = () => {\n  ReactGA.initialize(TRACKING_ID);\n  ReactGA.pageview(window.location.pathname);\n};\n\nexport { track };\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Grid, Paper, Typography } from \"@material-ui/core\";\nimport Confetti from \"react-dom-confetti\";\nimport { AppContext } from \"./Context\";\n\nconst Congrats = () => {\n  const { wpm } = useContext(AppContext);\n  const [confetti, setConfetti] = useState(true);\n  const width = window.innerWidth.toString();\n  const height = window.innerHeight.toString();\n\n  useEffect(() => {\n    setTimeout(() => setConfetti(true), 1000);\n  }, []);\n\n  return (\n    <>\n      <Confetti active={confetti} config={{ width, height }} />\n      <Grid container direction=\"column\">\n        <Grid item xs={2} />\n        <Grid item container>\n          <Grid item xs={1} />\n\n          <Grid item container xs={10}>\n            <Grid item container style={{ justifyContent: \"center\" }}>\n              <Grid item xs={10}>\n                <Paper\n                  elevation={5}\n                  style={{\n                    margin: \"1.5rem\",\n                    display: \"flex\",\n                    flexGrow: 1,\n                    flexDirection: \"column\",\n                    padding: 20,\n                    minHeight: 400,\n                  }}\n                >\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexGrow: 1,\n                      justifyContent: \"center\",\n                      alignItems: \"flex-end\",\n                      paddingBottom: 35,\n                    }}\n                  >\n                    <Typography\n                      variant=\"h2\"\n                      style={{\n                        textAlign: \"center\",\n                        fontWeight: 450,\n                      }}\n                    >\n                      Congratulations!\n                    </Typography>\n                  </div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexGrow: 1,\n                      justifyContent: \"center\",\n                      alignItems: \"flex-start\",\n                    }}\n                  >\n                    <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n                      Your typing speed was <strong>{wpm}</strong> words per\n                      minute\n                    </Typography>\n                  </div>\n                </Paper>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item sm={1} />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport { Congrats };\n","import React, { useState, useEffect } from \"react\";\n\nimport Arena from \"./components/Arena/arena\";\nimport { Word, AppContext, TimerContext } from \"./components/Context\";\nimport \"./App.css\";\nimport { HighlightColors, ThemeColor } from \"./components/Colors\";\nimport { makeStyles, Theme, createStyles, colors } from \"@material-ui/core\";\nimport { WORD_COUNT, WORD_SIZE } from \"./components/Constants\";\nimport { track } from \"./components/analytics\";\nimport Starter from \"./components/Starter\";\nimport UserInput from \"./components/Arena/Input\";\nimport { Congrats } from \"./components/Congrats\";\n\n// What a legend\nconst durstenfeldShuffle = (array: string[]) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nconst App = () => {\n  const [words, setWords] = useState<Word[]>([]);\n  const [displayedWords, setDisplayedWords] = useState<Word[]>([]);\n  const [currentWord, setCurrentWord] = useState<number>(0);\n  const [entered, setEntered] = useState<string>(\"\");\n  const [lastEntered, setLastEntered] = useState<string>(\"\");\n  const [wpm, setWpm] = useState<number>(0);\n  const [timer, setTimer] = useState<number>(0);\n  const [charCount, setCharCount] = useState<number>(0);\n  const [started, setStarted] = useState<boolean>(false);\n  const [time, setTime] = useState<number>(-1);\n  const [lastWord, setLastWord] = useState<number>(-1);\n  const [currentSum, setCurrentSum] = useState<number>(0);\n\n  const [done, setDone] = useState(false);\n\n  // imagine not using a hardcoded list of words\n  // Jk, this is temporary\n  const getWords = (setWords: Function) => {\n    fetch(\"/words.txt\")\n      .then((res) => res.text())\n      .then((text) =>\n        setWords(\n          durstenfeldShuffle(text.split(\" \")).map((word) => ({\n            word,\n            highlight: HighlightColors.NONE,\n          }))\n        )\n      );\n  };\n\n  // update the word at position\n  const updateWord = (index: number, updateColor: ThemeColor) => {\n    const updatedDisplay = [...displayedWords];\n    updatedDisplay[index] = {\n      ...updatedDisplay[index],\n      highlight: updateColor,\n    };\n    setDisplayedWords(updatedDisplay);\n  };\n\n  const startTimer = () => {\n    if (started) {\n      return;\n    }\n    setStarted(true);\n    setTime(0);\n  };\n\n  const stopTimer = () => {\n    if (!started) {\n      return;\n    }\n    setStarted(false);\n  };\n\n  const nextWord = () => {\n    if (currentWord >= WORD_COUNT - 1) {\n      stopTimer();\n      setDone(true);\n    }\n    setCurrentWord(currentWord + 1);\n  };\n  useEffect(track);\n\n  useEffect(() => {\n    getWords(setWords);\n  }, []);\n\n  useEffect(() => {\n    setDisplayedWords(words.slice(0, WORD_COUNT));\n  }, [words]);\n\n  useEffect(() => {\n    if (started) {\n      setCurrentSum(currentSum + words[currentWord - 1].word.length);\n    }\n  }, [currentWord]);\n\n  useEffect(() => {\n    if (!started) {\n      return;\n    }\n    const updateTime = setTimeout(() => {\n      setTime(time + 1);\n    }, 1000);\n    return () => clearTimeout(updateTime);\n  }, [time]);\n\n  return (\n    <TimerContext.Provider value={{ startTimer, stopTimer }}>\n      <AppContext.Provider\n        value={{\n          words,\n          setWords,\n          displayedWords,\n          setDisplayedWords,\n          updateWord,\n          currentWord,\n          nextWord,\n          entered,\n          setEntered,\n          lastEntered,\n          setLastEntered,\n          wpm,\n          setWpm,\n          stopTimer,\n          time,\n          setTime,\n          charCount,\n          setCharCount,\n          timer,\n          lastWord,\n          setLastWord,\n          currentSum,\n          setCurrentSum,\n        }}\n      >\n        <Wrapper>\n          {/* {started ? <Arena /> : <Starter setStarted={setStarted} />} */}\n          {done ? <Congrats /> : <Arena />}\n        </Wrapper>\n      </AppContext.Provider>\n    </TimerContext.Provider>\n  );\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      height: \"100%\",\n      display: \"flex\",\n      flex: 1,\n      backgroundColor: colors.brown[200],\n    },\n  })\n);\n\nconst Wrapper: React.FC = ({ children }) => {\n  const classes = useStyles();\n  return <div className={classes.root}>{children}</div>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}