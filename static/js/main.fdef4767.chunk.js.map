{"version":3,"sources":["Colors.tsx","Arena/Input.tsx","Context.tsx","Arena/arena.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Color","useStyles","makeStyles","root","display","flexGrow","textBox","textDecoration","fontSize","Input","changeHandler","classes","TextField","onChange","InputProps","input","HighlightColors","BAD","bg","RED","text","WHITE","GREAT","GREEN","NONE","BLACK","DONE","LIGHT_GREY","AppContext","React","createContext","words","setWords","WordBox","children","highlight","style","padding","backgroundColor","color","WordHandler","useContext","useState","highlighted","setHighlighted","setLastHighlighted","inputHighlight","setInputHighlight","setWordHighlight","index","Paper","margin","slice","highlightedIndex","e","rawEntered","target","value","entered","trim","currentWord","word","console","log","isWordCorrect","length","WordDisplay","flexWrap","map","key","Arena","Grid","container","direction","item","sm","App","getWords","fetch","then","res","array","i","j","Math","floor","random","durstenfeldShuffle","split","useEffect","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fdef4767.chunk.js","sourcesContent":["export enum Color {\n  RED = \"red\",\n  GREEN = \"green\",\n  NONE = \"inherit\",\n  WHITE = \"white\",\n  BLACK = \"black\",\n  LIGHT_GREY = \"lightgrey\",\n}\n\nexport interface ThemeColor {\n  bg: Color;\n  text: Color;\n}\n\nexport type ThemeColors = ThemeColor[];\n\n// the interface\nexport interface HighlightColor {\n  BAD: ThemeColor;\n  GREAT: ThemeColor;\n  NONE: ThemeColor;\n  DONE: ThemeColor;\n}\n\n// the star: object\nexport const HighlightColors: HighlightColor = {\n  BAD: {\n    bg: Color.RED,\n    text: Color.WHITE,\n  },\n  GREAT: {\n    bg: Color.GREEN,\n    text: Color.WHITE,\n  },\n  NONE: {\n    bg: Color.NONE,\n    text: Color.BLACK,\n  },\n  DONE: {\n    bg: Color.LIGHT_GREY,\n    text: Color.BLACK,\n  },\n};\n","import React, { ChangeEvent } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { ThemeColor } from \"../Colors\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    flexGrow: 1,\n  },\n  textBox: {\n    textDecoration: \"none\",\n    fontSize: 50,\n  },\n});\n\ninterface InputProps {\n  changeHandler(e: ChangeEvent): void;\n  highlight: ThemeColor;\n}\n\nconst Input = ({ changeHandler }: InputProps) => {\n  const classes = useStyles();\n  return (\n    <TextField\n      onChange={changeHandler}\n      InputProps={{\n        classes: {\n          root: classes.root,\n          input: classes.textBox,\n        },\n      }}\n    />\n  );\n};\n\nexport { Input as default };\n","import React from \"react\";\nimport { ThemeColor } from \"./Colors\";\n\nexport interface Word {\n  word: string;\n  highlight: ThemeColor;\n}\n\ninterface WordsContext {\n  words: Word[];\n  setWords: Function;\n}\nconst AppContext = React.createContext<WordsContext>({\n  words: [],\n  setWords: () => {},\n});\n\nexport { AppContext };\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { Grid, Paper } from \"@material-ui/core\";\nimport Input from \"./Input\";\nimport { HighlightColors, ThemeColor } from \"../Colors\";\nimport { AppContext, Word } from \"../Context\";\n\ninterface WordProps {\n  children: React.ReactNode;\n  highlight: ThemeColor;\n}\n\nconst WordBox = ({ children, highlight }: WordProps) => {\n  return (\n    <span\n      style={{\n        padding: \"10px\",\n        backgroundColor: highlight.bg,\n        color: highlight.text,\n      }}\n    >\n      {children}\n    </span>\n  );\n};\n\nconst WordHandler = () => {\n  const { words } = useContext(AppContext);\n  const [highlighted, setHighlighted] = useState<number>(0);\n  const [lastHighlighted, setLastHighlighted] = useState<number | null>(null);\n  // const [wordHighlight, setWordHighlight] = useState<ThemeColor>(\n  //   HighlightColors.NONE\n  // );\n  const [inputHighlight, setInputHighlight] = useState<ThemeColor>(\n    HighlightColors.NONE\n  );\n\n  interface setWordHighlightProps {\n    index: number;\n    color: ThemeColor;\n  }\n  const clearInputHighLight = () => {\n    setInputHighlight(HighlightColors.NONE);\n  };\n\n  const setWordHighlight = ({ index, color }: setWordHighlightProps) => {\n    words[index].highlight = color;\n  };\n\n  const clearWordHighlight = () => {\n    words[highlighted].highlight = HighlightColors.NONE;\n  };\n\n  const finishWord = () => {\n    setLastHighlighted(highlighted);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const rawEntered = e.target.value;\n    const entered = rawEntered.trim();\n    // Compare entered stuff with currently highlighted word\n    if (!entered) {\n      clearInputHighLight();\n      return;\n    }\n\n    const currentWord = words[highlighted].word.trim();\n    console.log(\"'\" + currentWord + \"'\", entered);\n    const isWordCorrect = currentWord === entered;\n    setWordHighlight({\n      index: highlighted,\n      color: isWordCorrect ? HighlightColors.GREAT : HighlightColors.BAD,\n    });\n\n    if (isWordCorrect && rawEntered[rawEntered.length - 1] === \" \") {\n      finishWord();\n      setWordHighlight({ index: highlighted + 1, color: HighlightColors.DONE });\n      setHighlighted(highlighted + 1);\n      // Remove stuff from input\n      e.target.value = \"\";\n    }\n  };\n\n  return (\n    <>\n      <Paper style={{ margin: \"3rem\" }}>\n        <WordDisplay\n          words={words.slice(0, 100)}\n          highlightedIndex={highlighted}\n        />\n      </Paper>\n      <Paper>\n        <Input changeHandler={handleChange} highlight={inputHighlight} />\n      </Paper>\n    </>\n  );\n};\n\ninterface WordDisplayProps {\n  words: Word[];\n  highlightedIndex: number;\n}\nconst WordDisplay = ({ words, highlightedIndex }: WordDisplayProps) => {\n  return (\n    <div style={{ display: \"flex\", flexWrap: \"wrap\", padding: \"10px\" }}>\n      {words.map((word) => (\n        <WordBox key={word.word} highlight={word.highlight}>\n          {word.word}\n        </WordBox>\n      ))}\n    </div>\n  );\n};\n\nconst Arena = () => {\n  return (\n    <Grid container direction=\"column\">\n      <Grid item container>\n        <Grid item sm={1} />\n        <Grid item sm={10}>\n          <WordHandler />\n        </Grid>\n        <Grid item sm={1} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Arena;\n","import React, { useState, useEffect } from \"react\";\n\nimport Arena from \"./Arena/arena\";\nimport { Word, AppContext } from \"./Context\";\nimport \"./App.css\";\nimport { HighlightColors } from \"./Colors\";\n\n// What a legend\nconst durstenfeldShuffle = (array: string[]) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nconst App = () => {\n  const [words, setWords] = useState<Word[]>([]);\n\n  // imagine not using a hardcoded list of words\n  // Jk, this is temporary\n  const getWords = (setWords: Function) => {\n    fetch(\"/words.txt\")\n      .then((res) => res.text())\n      .then((text) =>\n        setWords(\n          durstenfeldShuffle(text.split(\"\\n\")).map((word) => ({\n            word,\n            highlight: HighlightColors.NONE,\n          }))\n        )\n      );\n  };\n\n  useEffect(() => {\n    getWords(setWords);\n  }, []);\n\n  return (\n    <AppContext.Provider value={{ words: words, setWords: setWords }}>\n      <Arena />\n    </AppContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}